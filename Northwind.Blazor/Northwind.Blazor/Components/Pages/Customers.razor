@page "/customers/{country?}"
@inject INorthwindService _service
@attribute [StreamRendering]

<PageTitle>Customers</PageTitle>

<h3>Customers @(string.IsNullOrWhiteSpace(Country)? "Worldwide" : $"in {Country}")</h3>
<div>
    <NavLink href="createcustomer" class="btn btn-info">
      <i class="bi bi-plus-square"></i> Create New
    </NavLink>
</div>
@if (customers is null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table">
      <thead>
          <tr>
              <th>Id</th>
              <th>Company Name</th>
              <th>Address</th>
              <th>Phone</th>
              <th></th>
          </tr>
      </thead>
      <tbody>
          @foreach (Customer c in customers)
          {
            <tr>
                <td>@c.CustomerId</td>
                <td>@c.CompanyName</td>
                <td>
                    @c.Address<br/>
                    @c.City<br/>
                    @c.PostalCode<br/>
                    @c.Country
                </td>
                <td>@c.Phone</td>
                <td>
                    <NavLink href="@($"editcustomer/{c.CustomerId}")" class="btn btn-info">
                      <i class="bi bi-pencil"></i>
                    </NavLink>
                    <NavLink href="@($"deletecustomer/{c.CustomerId}")" class="btn btn-danger">
                      <i class="bi bi-trash"></i>
                    </NavLink>
                </td>
            </tr>
          }
    </tbody>
  </table>
}
@code {
  [Parameter]
  public string? Country { get; set; }

  private IEnumerable<Customer>? customers;

  protected override async Task OnParametersSetAsync()
  {
    await Task.Delay(500);

    if (string.IsNullOrWhiteSpace(Country))
    {
      customers = await _service.GetCustomersAsync();
    }
    else
    {
      customers = await _service.GetCustomersAsync(Country);
    }
  }
}
